#!/usr/bin/env python3
import argparse
from pathlib import Path

def main():
    global options
    options = get_options()
    vseqs = read_v_sequences(options.vfile)
    analyse_sequence(options.fasta, options.outfile, options.mindist, options.maxdist, vseqs)


def analyse_sequence(infile,outfile,mindist, maxdist, vseqs):
    germline_hits = 0
    too_short = 0
    too_long = 0
    hits = 0
    total_seqs = 0

    with open(outfile,"wt",encoding="utf8") as out:
        for id,seq in read_fasta(infile):
            total_seqs += 1
            for i,vseq in enumerate(vseqs):
                # Can we find the VH1 sequence
                if vseq[1] in seq:
                    # Get the end position of the sequence
                    s1_end = seq.find(vseq[1])+len(vseq[1])
                    

                    # We first try the other end to see if this
                    # is compatible with being a germline hit
                    if seq.find(vseq[2],s1_end) != -1:
                        # This is a hit from the same V so it's germline
                        germline_hits += 1
                        break


                    # Now try all of the other ends.
                    for j,vseq2 in enumerate(vseqs):
                        s2_start = seq.find(vseq2[2],s1_end)

                        if s2_start == -1:
                            continue

                        # If we get a hit it could be a germline one if the V1
                        # sequence is the same as the first one we found
                        if vseq2[1] == vseq[1]:
                            # Yeah, it's compatible with being germline
                            germline_hits += 1
                            break

                        distance = s2_start - s1_end

                        if distance < mindist:
                            too_short += 1
                            break
                        
                        if distance > maxdist:
                            too_long += 1
                            break

                        # If we get here we've got a hit.
                        hits += 1
                        line = [id,vseq[0],vseq2[0],s1_end, s2_start]
                        print("\t".join([str(x) for x in line]), file=out)
                        break

                    break

    print("File:", infile)
    print("Total: ",total_seqs)
    print("Hits: ",hits)
    print("Germline: ",germline_hits)
    print("Too short: ",too_short)
    print("Too long: ",too_long)

                        

def read_v_sequences(file):
    print("Reading from ",file)
    vseqs = []
    with open(file,"rt", encoding="utf8") as infh:
        infh.readline()
        for line in infh:
            print(line)
            ig,fromseq,toseq = line.strip().split("\t")
            vseqs.append((ig,fromseq,toseq))


    # Let's do some sanity checking - we need to know if there
    # are any duplicated sequences in the set.
    for i in vseqs:
        for j in vseqs:
            if i is j:
                continue
            if i[1] == j[1]:
                if i[0] < j[0]:
                    print("[WARNING] Duplicate V1",i[0],"and",j[0])

            if i[2] == j[2]:
                if i[0] < j[0]:
                    print("[WARNING] Duplicate V2",i[0],"and",j[0])


    return vseqs


def read_fasta(file):
    seq = None
    id = None
    with open(file,"rt",encoding="utf8") as infh:
        for line in infh:
            if line.startswith(">"):
                if seq is not None:
                    yield (id,seq)

                id = line[1:].split()[0].strip()
                seq = ""
            else:
                seq += line.lower().strip()

        if seq is not None:
            yield(id,seq)


def get_options():

    parser = argparse.ArgumentParser("Find mis-spliced VDJ Sequences")
    parser.add_argument("fasta",type=str,help="FastA format sequence file to search")
    parser.add_argument("outfile",type=str,help="Output file for hits")
    parser.add_argument("--vfile",type=str,help="File with V sequences to search", default=Path(__file__).parent.joinpath("v_sequences.txt"))
    parser.add_argument("--mindist",type=int, default=0)
    parser.add_argument("--maxdist",type=int, default=20)

    options = parser.parse_args()


    return options


if __name__ == "__main__":
    main()