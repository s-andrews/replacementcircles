#!/usr/bin/env python3
import argparse
from pathlib import Path
from multiprocessing import Queue, Process, Manager
from threading import Thread
import gzip

def main():
    global options
    global queue
    queue = Queue()
    options = get_options()

    vseqs = read_v_sequences(options.vfile)

    reader_thread = Thread(target=make_sequence_queue)
    reader_thread.start()

    manager = Manager()
    results = manager.dict()
    results["hits"] = manager.list()
    results["seq_too_short"] = 0
    results["germline"] = 0
    results["nov1"] = 0
    results["nov2"] = 0
    results["too_short"] = 0
    results["too_long"] = 0
    results["total_seqs"] = 0

    procs = []
    for _ in range(options.threads):
        p = Process(target=analyse_sequence, args=(vseqs,results))
        procs.append(p)
        p.start()

    for p in procs:
        p.join()

    reader_thread.join()

    print("hits",len(results["hits"]))
    for x in results.keys():
        if not x=="hits":
            print(x,results[x])

    print("Saving results to",options.outfile)

    with open(options.outfile,"wt",encoding="utf8") as out:
        print("\t".join(["READ_ID","VSEQ1","VSEQ2","VSEQ1_END", "VSEQ2_START", "DISTANCE"]), file=out)
        for hit in results["hits"]:
            print("\t".join([str(x) for x in hit]), file=out)


def process_sequence(sequence,vseqs,min_total_len, min_v2_len):
    id,seq = sequence

    if len(seq) < min_total_len:
        return("seq_too_short")
    
    lastpos = len(seq)-min_v2_len

    # We'll do a search of all of the vseqs to see how good a hit
    # we can find.  We allow some mismatches,  but we always want
    # to find the best possible hit, so we'll keep going until we
    # find a perfect match, or we've looked at everything for an 
    # imperfect match.

    s1_start,vseq = find_best_fuzzy_match(seq,vseqs,1,options.mismatches,0,lastpos)
    if s1_start == -1:
        return "nov1"

    # Get the end position of the sequence
    s1_end = s1_start+len(vseq[1])
    
    # We first try the other end to see if this
    # is compatible with being a germline hit
    if fuzzy_index(seq,vseq[2],options.mismatches+2,s1_end) != -1:
        # This is a hit from the same V so it's germline
        return "germline"

    # Now try all of the other ends.
    s2_start,vseq2 = find_best_fuzzy_match(seq,vseqs,2,options.mismatches,0,lastpos)

    if s2_start == -1:
        return "nov2"
        
    # If we get a hit it could be a germline one if the V1
    # sequence is similar enough to the first one we found
    if fuzzy_index(seq,vseq2[1],options.mismatches+2) != -1:
        # Yeah, it's compatible with being germline
        return "germline"

    distance = s2_start - s1_end

    if distance < options.mindist:
        return "too_short"
    
    if distance > options.maxdist:
        return "too_long"

    # If we get here we've got a hit.
    line = [id,vseq[0],vseq2[0],s1_end, s2_start, distance]
    return line
            
def find_best_fuzzy_match(seq,vseqs,vseq_index,mismatches,start,end):

    best_vseq = None
    best_position = -1
    best_mismatches = None

    for vseq in vseqs:
        index,mismatches = fuzzy_index(seq,vseqs[vseq_index],mismatches,start,end)
        if index != -1:
            if best_mismatches is None:
                best_vseq = vseq
                best_position = index
                best_mismatches = mismatches
            elif mismatches < best_mismatches:
                best_vseq = vseq
                best_position = index
                best_mismatches = mismatches


            if best_mismatches == 0:
                return (best_position,best_vseq)



    return (best_position, best_vseq)

def analyse_sequence(vseqs, results):

    min_total_len = len(vseqs[0][0]) + len(vseqs[0][1]) + options.mindist
    min_v2_len = len(vseqs[0][1]) + options.mindist

    while True:
        sequence = queue.get()

        if not isinstance(sequence,tuple):
            break

        results["total_seqs"] += 1

        if results["total_seqs"] % 1000 == 0:
            print("Processed",results["total_seqs"],"sequences")

        answer = process_sequence(sequence,vseqs,min_total_len,min_v2_len)

        if isinstance(answer,list):
            # It's a hit
            results["hits"].append(answer)

        else:
            results[answer] += 1


                        
def read_v_sequences(file):
    print("Reading from ",file)
    vseqs = []
    with open(file,"rt", encoding="utf8") as infh:
        infh.readline()
        for line in infh:
            ig,fromseq,toseq = line.strip().split()
            vseqs.append((ig,fromseq.lower(),toseq.lower()))


    # Let's do some sanity checking - we need to know if there
    # are any duplicated sequences in the set.
    for i in vseqs:
        for j in vseqs:
            if i is j:
                continue
            if i[1] == j[1]:
                if i[0] < j[0]:
                    print("[WARNING] Duplicate V1",i[0],"and",j[0])

            if i[2] == j[2]:
                if i[0] < j[0]:
                    print("[WARNING] Duplicate V2",i[0],"and",j[0])


    return vseqs

def make_sequence_queue():
    for sequence in read_seqfile(options.seqfile):
        queue.put(sequence)

    for _ in range(options.threads):
        queue.put("DONE")


def read_seqfile(file):
    if file.lower().endswith("fa") or file.lower().endswith("fasta"):
        yield from read_fasta(file)

    else:
        yield from read_fastq(file)

def read_fastq(file):
    seq = None
    id = None

    infh = None

    complementtable = str.maketrans("gatc","ctag")

    if file.lower().endswith("gz"):
        infh = gzip.open(file,"rt",encoding="utf8")
    else:
        infh = open(file,"rt",encoding="utf8")


    for line in infh:
        id = line.strip()[1:]
        seq = infh.readline().strip().lower()

        if not options.noreverse:
            seq = seq.translate(complementtable)
            seq = seq[::-1]

        infh.readline()
        infh.readline()
        yield(id,seq)

    infh.close()


def read_fasta(file):
    seq = None
    id = None

    complementtable = str.maketrans("gatc","ctag")

    with open(file,"rt",encoding="utf8") as infh:
        for line in infh:
            if line.startswith(">"):
                if seq is not None:
                    if not options.noreverse:
                        seq = seq.translate(complementtable)
                        seq = seq[::-1]
                    yield (id,seq)

                id = line[1:].split()[0].strip()
                seq = ""
            else:
                seq += line.lower().strip()

        if seq is not None:
            if not options.noreverse:
                seq = seq.translate(complementtable)
                seq = seq[::-1]

            yield(id,seq)


def fuzzy_index(longstr,shortstr,allowed_mismatches=0, initialpos=0, lastpos=-1):
    """Find if one string is in another allowing some mismatch"""

    if lastpos == -1:
        lastpos = len(longstr)-len(shortstr)

    if lastpos < 0:
        return (-1,0)

    for start in range(initialpos,lastpos+1):
        mismatches = 0
        for pos in range(len(shortstr)):
            if shortstr[pos] != longstr[start+pos]:
                mismatches += 1
                if mismatches > allowed_mismatches:
                    break
        
        if mismatches <= allowed_mismatches:
            return (start,mismatches)

    return (-1,0)

def get_options():

    parser = argparse.ArgumentParser("Find mis-spliced VDJ Sequences")
    parser.add_argument("seqfile",type=str,help="FastA or FastQ format sequence file to search")
    parser.add_argument("outfile",type=str,help="Output file for hits")
    parser.add_argument("--vfile",type=str,help="File with V sequences to search", default=Path(__file__).parent.joinpath("v_sequences.txt"))
    parser.add_argument("--noreverse", help="Do not reverse complement input sequences", action="store_true")
    parser.add_argument("--mindist",type=int, default=0)
    parser.add_argument("--threads",type=int, default=1)
    parser.add_argument("--maxdist",type=int, default=20)
    parser.add_argument("--mismatches",type=int, default=1)


    options = parser.parse_args()


    return options


if __name__ == "__main__":
    main()